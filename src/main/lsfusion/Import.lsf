MODULE Import;

REQUIRE Batch;

importXLS 'Импорт из Excel' () {
    INPUT f = EXCELFILE DO {
        LOCAL project = STRING (INTEGER);
        LOCAL ips = STRING (INTEGER);
        LOCAL billNumber30Purchase = STRING (INTEGER);
        LOCAL billDate30Purchase = STRING (INTEGER);
        LOCAL billNumber30Sale = STRING (INTEGER);
        LOCAL billDate30Sale = STRING (INTEGER);
        LOCAL invoiceNumber = STRING (INTEGER);
        LOCAL invoiceDate = DATE (INTEGER);
        LOCAL receivingActNumber = STRING (INTEGER);
        LOCAL receivingActDate = STRING (INTEGER);
        LOCAL l1 = STRING (INTEGER);
        LOCAL l2 = STRING (INTEGER);
        LOCAL l3 = STRING (INTEGER);
        LOCAL projectType = STRING (INTEGER);
        LOCAL idBatch = INTEGER (INTEGER);
        LOCAL orderTypeNumberDate = STRING (INTEGER);
        LOCAL pos = STRING (INTEGER);
        LOCAL subpos = STRING (INTEGER);
        LOCAL l4 = STRING (INTEGER);
        LOCAL l5 = STRING (INTEGER);
        LOCAL article = STRING (INTEGER);
        LOCAL tagType = STRING (INTEGER);
        LOCAL description = STRING (INTEGER);
        LOCAL name = STRING (INTEGER);
        LOCAL foreignCode = STRING (INTEGER);
        LOCAL phase = STRING (INTEGER);
        LOCAL storage = STRING (INTEGER);
        LOCAL quantity = NUMERIC[10,5] (INTEGER);
        LOCAL nameUom = STRING (INTEGER);
        LOCAL weight = NUMERIC[10,3] (INTEGER);
        LOCAL nameUom2 = STRING (INTEGER);
        LOCAL currency = STRING (INTEGER);
        LOCAL price = NUMERIC[10,3] (INTEGER);
        LOCAL sumEuro = NUMERIC[10,3] (INTEGER);
        LOCAL sumYuan = NUMERIC[10,3] (INTEGER);
        LOCAL sumRub = NUMERIC[10,3] (INTEGER);
        LOCAL packingListNumber = STRING (INTEGER);
        LOCAL placeNumber = STRING (INTEGER); 
        LOCAL billNumber17Purchase = STRING (INTEGER);
        LOCAL billDate17Purchase = STRING (INTEGER);
        LOCAL billNumber17Sale = STRING (INTEGER);
        LOCAL billDate17Sale = STRING (INTEGER);
        LOCAL invoiceNumberDate = STRING (INTEGER);
        LOCAL sum30 = NUMERIC[10,3] (INTEGER);
        LOCAL sum17 = NUMERIC[10,3] (INTEGER);
        
        IMPORT XLS HEADER FROM f TO project, ips, billNumber30Purchase, billDate30Purchase, billNumber30Sale,  billDate30Sale,
            invoiceNumber, invoiceDate, receivingActNumber, receivingActDate, l1, l2, l3, projectType, idBatch, orderTypeNumberDate,
            pos, subpos, l4, l5, article, tagType, description, name, foreignCode, phase, storage, quantity, nameUom,
            weight, nameUom2, currency, price, sumEuro, sumYuan, sumRub, packingListNumber, placeNumber, billNumber17Purchase,
            billDate17Purchase, billNumber17Sale, billDate17Sale, invoiceNumberDate, sum30, sum17;
        
//        FOR description(INTEGER i) DO NEW b = Batch {
//            IF NOT project(project(i)) THEN NEW p = Project {
//                id(p) <- project(i);
//                name(p) <- project(i);
//                type(p) <- IF projectType(i) == 'onshore' THEN ProjectType.onshore ELSE ProjectType.offshore;
//            }
//            project(b) <- project(project(i));
//            phase(b) <- phase(i);
//            quantity(b) <- quantity(i);
//            
//            IF NOT item(description(i)) THEN NEW it = Item {
//                id(it) <- description(i);
//                description(it) <- description(i);
//                name(it) <- name(i);
//                foreignCode(it) <- foreignCode(i);
//                storage(it) <- BOOLEAN(storage(i));
//                IF NOT uom(nameUom(i)) THEN NEW u = Uom {
//                    
//                }
//            }
//        } 
        //project  
        FOR [GROUP SUM 1 BY project(INTEGER i)](STRING id) AND NOT project(id) NEW p = Project DO {
            id(p) <- id;
            name(p) <- id;
        }
        FOR INTEGER i = [GROUP MIN INTEGER ii BY project(ii)](STRING id) AND id(Project p) = id DO {
            type(p) <- IF projectType(i) == 'onshore' THEN ProjectType.onshore ELSE ProjectType.offshore;
        }

        //UOM
        FOR [GROUP SUM 1 BY nameUom(INTEGER i)](STRING id) AND NOT uom(id) NEW u = Uom DO {
            id(u) <- id;
            name(u) <- id;
        }
        FOR [GROUP SUM 1 BY nameUom2(INTEGER i)](STRING id) AND NOT uom(id) NEW u = Uom DO {
            id(u) <- id;
            name(u) <- id;
        }

        //Item
        FOR [GROUP SUM 1 BY tagType(INTEGER i)](STRING id) AND NOT item(id) NEW e = Item DO {
            id(e) <- id;
        }
        FOR INTEGER i = [GROUP MIN INTEGER ii BY tagType(ii)](STRING id) AND id(Item e) = id DO {
            name(e) <- name(i);
            description(e) <- description(i);
            foreignCode(e) <- foreignCode(i);
            storage(e) <- IF storage(i) THEN TRUE;
            uom(e) <- uom(nameUom(i));
            weight(e) <- weight(i);
            weightUom(e) <- uom(nameUom2(i));
            IF article(i) THEN type(e) <- ItemType.material; ELSE type(e) <- ItemType.equipment;;
            IF isSubstring(tagType(i), 'Комплектующие') OR isSubstring(tagType(i), 'components') THEN 
                isComponent(e) <- TRUE;
            position(e) <- pos(i);
            subposition(e) <- subpos(i);
        }

        //IPS
        FOR [GROUP SUM 1 BY ips(INTEGER i)](STRING id) AND NOT iPS(id) NEW p = IPS DO {
            id(p) <- id;
        }

        //Order
        FOR [GROUP SUM 1 BY orderTypeNumberDate(INTEGER i)](STRING id) AND NOT order(id) NEW o = Order DO {
            id(o) <- id;
            IF isSubstring(id, 'Заказ поставщику') THEN type(o) <- OrderType.purchase; ELSE type(o) <- OrderType.sale;
            number(o) <- trim(substr(id, 18, 11));
            date(o) <-  toDateFormat(trim(substr(id, 32, 10)), 'DD.MM.YYYY');
        }
        
        //invoice
        FOR [GROUP SUM 1 BY invoiceNumber(INTEGER i)](STRING id) AND NOT invoice(id) AND id NEW i = Invoice DO {
            id(i) <- id;
            number(i) <- id;
            type(i) <- InvoiceType.purchase;
        }
        FOR INTEGER i = [GROUP MIN INTEGER ii BY invoiceNumber(ii)](STRING id) AND id(Invoice in) = id DO {
            date(in) <- invoiceDate(i);
        }
        FOR [GROUP SUM 1 BY invoiceNumberDate(INTEGER i)](STRING id) AND NOT invoice(id) AND id NEW i = Invoice DO {
            id(i) <- id;
            number(i) <- trim(substr(id, 10, 4));;
            type(i) <- InvoiceType.sale;
        }
        FOR INTEGER i = [GROUP MIN INTEGER ii BY invoiceNumberDate(ii)](STRING id) AND id(Invoice in) = id DO {
            date(in) <- toDateFormat(trim(substr(id, 18, 10)), 'DD.MM.YYYY');
        }
        APPLY;
    }
}

EXTEND FORM option
    PROPERTIES importXLS()
;

DESIGN option {
    OBJECTS {
        MOVE PROPERTY(importXLS());
    }
}
